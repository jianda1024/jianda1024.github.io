<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java多线程 on Interview</title>
    <link>https://jianda1024.github.io/interview/program-lang/java-thread/</link>
    <description>Recent content in Java多线程 on Interview</description>
    <generator>Hugo</generator>
    <language>interview</language>
    <atom:link href="https://jianda1024.github.io/interview/program-lang/java-thread/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Part.1</title>
      <link>https://jianda1024.github.io/interview/program-lang/java-thread/p1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/program-lang/java-thread/p1/</guid>
      <description>&lt;h2 id=&#34;---程序进程线程&#34;&gt;&#xD;&#xA;  &amp;ndash; 程序、进程、线程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e7%a8%8b%e5%ba%8f%e8%bf%9b%e7%a8%8b%e7%ba%bf%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;程序&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是含有指令和数据的文件，存储在硬件设备中，因此程序是静态的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进程&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是程序的一次执行过程，是程序的一个运行实例，因此进程是动态的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;进程之间是相互独立的，各自有自己独立的内存空间和系统资源&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;线程&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是指在一个进程内的独立执行路径。一个进程可以包含多个线程。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;每个线程都是独立运行的，有自己的执行顺序和状态。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;多个线程可以共享内存空间和系统资源。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---创建线程的方式&#34;&gt;&#xD;&#xA;  &amp;ndash; 创建线程的方式&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e5%88%9b%e5%bb%ba%e7%ba%bf%e7%a8%8b%e7%9a%84%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;继承Thread类&lt;/li&gt;&#xA;&lt;li&gt;实现Runnable接口&lt;/li&gt;&#xA;&lt;li&gt;实现Callable接口&lt;/li&gt;&#xA;&lt;li&gt;使用线程池创建&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---停止线程的方式&#34;&gt;&#xD;&#xA;  &amp;ndash; 停止线程的方式&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e5%81%9c%e6%ad%a2%e7%ba%bf%e7%a8%8b%e7%9a%84%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用退出标志，使线程正常退出&lt;/li&gt;&#xA;&lt;li&gt;使用interrupt()方法中断线程&lt;/li&gt;&#xA;&lt;li&gt;使用stop()方法强行终止，但不推荐，可能会产生不可预料的结果&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---线程安全&#34;&gt;&#xD;&#xA;  &amp;ndash; 线程安全&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果在多线程下执行和在单线程下执行永远都能获得一样的结果，那么代码就是线程安全的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---并发三特性&#34;&gt;&#xD;&#xA;  &amp;ndash; 并发三特性&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e5%b9%b6%e5%8f%91%e4%b8%89%e7%89%b9%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;原子性&lt;/p&gt;</description>
    </item>
    <item>
      <title>Part.2</title>
      <link>https://jianda1024.github.io/interview/program-lang/java-thread/p2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/program-lang/java-thread/p2/</guid>
      <description>&lt;h2 id=&#34;---volatile&#34;&gt;&#xD;&#xA;  &amp;ndash; volatile&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---volatile&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;volatile&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 是java提供的一种轻量级同步机制&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 用于修饰变量，保证所修饰变量的可见性，不保证原子性&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 会禁止指令重排优化&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;底层原理&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 当对volatile变量进行写操作的时候，JVM会增加Lock前缀指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 基于缓存一致性协议，cpu会检查缓存是否过期，如果过期，则重新读取系统内存数据&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 缓存一致性：每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---synchronized&#34;&gt;&#xD;&#xA;  &amp;ndash; synchronized&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---synchronized&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;synchronized&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
