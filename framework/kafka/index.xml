<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka on IWiki</title>
    <link>https://localhost:1313/framework/kafka/</link>
    <description>Recent content in Kafka on IWiki</description>
    <generator>Hugo</generator>
    <language>iwiki</language>
    <atom:link href="https://localhost:1313/framework/kafka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MQ</title>
      <link>https://localhost:1313/framework/kafka/mq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/framework/kafka/mq/</guid>
      <description>&lt;h1 id=&#34;消息队列&#34;&gt;&#xD;&#xA;  消息队列&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h3 id=&#34;mq&#34;&gt;&#xD;&#xA;  MQ&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mq&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Message Queue，消息队列&lt;/li&gt;&#xA;&lt;li&gt;是基础数据结构中“先进先出”的一种数据结构。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;原理&#34;&gt;&#xD;&#xA;  原理&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;点对点模式：一对一，消费者主动拉取数据，消息收到后消息清除&lt;/li&gt;&#xA;&lt;li&gt;发布/订阅模式：一对多，数据生产后，推送给所有订阅者&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://localhost:1313/images/2022Q2/img_2022-05-22_161619.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h4 id=&#34;优点&#34;&gt;&#xD;&#xA;  优点&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;解耦：解耦消息处理过程，使得扩展变得容易&lt;/li&gt;&#xA;&lt;li&gt;异步：允许异步处理消息&lt;/li&gt;&#xA;&lt;li&gt;削峰：提高峰值处理能力&lt;/li&gt;&#xA;&lt;li&gt;缓冲：控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况&lt;/li&gt;&#xA;&lt;li&gt;保证数据安全：消息队列把数据进行持久化直到它们已经被完全处理。这规避了数据丢失风险。&lt;/li&gt;&#xA;&lt;li&gt;保证消息的有序性：保证数据会按照特定的顺序来处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;缺点&#34;&gt;&#xD;&#xA;  缺点&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%ba%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统可用性降低&lt;/li&gt;&#xA;&lt;li&gt;系统复杂性提高&lt;/li&gt;&#xA;&lt;li&gt;一致性问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;消息中间件&#34;&gt;&#xD;&#xA;  消息中间件&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e4%b8%ad%e9%97%b4%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;单机吞吐量&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;时效性&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;可用性&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;消息可靠性&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ActiveMQ&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;万级&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ms 级&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;高，主从架构&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;有较低的概率丢失数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;RabbitMQ&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;万级&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;μs 级&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;高，主从架构&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;RocketMQ&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;10万级&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ms 级&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;非常高，分布式架构&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;可零丢失&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Kafka&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;10万级&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ms 级&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;非常高，分布式架构&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;可零丢失&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;activemq&#34;&gt;&#xD;&#xA;  ActiveMQ&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#activemq&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;非常成熟，功能强大，在业内大量的公司以及项目中都有应用&lt;/li&gt;&#xA;&lt;li&gt;偶尔会有较低概率丢失消息&lt;/li&gt;&#xA;&lt;li&gt;社区活跃度低，官方对其维护也越来越少&lt;/li&gt;&#xA;&lt;li&gt;而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;rabbitmq&#34;&gt;&#xD;&#xA;  RabbitMQ&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rabbitmq&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;erlang语言开发，性能极其好，延时很低；&lt;/li&gt;&#xA;&lt;li&gt;吞吐量到万级，MQ功能比较完备&lt;/li&gt;&#xA;&lt;li&gt;而且开源提供的管理界面非常棒，用起来很好用&lt;/li&gt;&#xA;&lt;li&gt;社区相对比较活跃，几乎每个月都发布几个版本&lt;/li&gt;&#xA;&lt;li&gt;RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重&lt;/li&gt;&#xA;&lt;li&gt;erlang语言本身带来的问题。很难读源码，很难定制和掌控&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;rocketmq&#34;&gt;&#xD;&#xA;  RocketMQ&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rocketmq&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;接口简单易用，有阿里品牌保障&lt;/li&gt;&#xA;&lt;li&gt;日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便&lt;/li&gt;&#xA;&lt;li&gt;社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景&lt;/li&gt;&#xA;&lt;li&gt;java系的，可以自己阅读源码，定制自己公司的MQ，可以掌控&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;kafka&#34;&gt;&#xD;&#xA;  Kafka&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仅仅提供较少的核心功能&lt;/li&gt;&#xA;&lt;li&gt;但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展&lt;/li&gt;&#xA;&lt;li&gt;kafka最好是支撑较少的topic数量即可，保证其超高吞吐量&lt;/li&gt;&#xA;&lt;li&gt;kafka唯一的一点劣势是有可能消息重复消费，在大数据领域中以及日志采集中，这点轻微影响可以忽略。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>工作原理</title>
      <link>https://localhost:1313/framework/kafka/work-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/framework/kafka/work-principle/</guid>
      <description>&lt;h1 id=&#34;工作原理&#34;&gt;&#xD;&#xA;  工作原理&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h3 id=&#34;术语&#34;&gt;&#xD;&#xA;  术语&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%af%e8%af%ad&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;producer：生产者，生产 message 发送到 topic&lt;/li&gt;&#xA;&lt;li&gt;consumer：消费者，订阅 topic 消费 message&lt;/li&gt;&#xA;&lt;li&gt;consumer group：消费者组，同组的不同消费者不能同时消费同一个分区的数据&lt;/li&gt;&#xA;&lt;li&gt;broker：指 Kafka 节点，一个 Kafka 集群由多个 Kafka 节点组成。&lt;/li&gt;&#xA;&lt;li&gt;topic：指消息类别，每条发布到 kafka 集群的消息都属于某个类别。&lt;/li&gt;&#xA;&lt;li&gt;partition：指 topic 的分区，每个 topic 多个 partition。&lt;/li&gt;&#xA;&lt;li&gt;segment：指 partition 的分段，每个 partition 包含多个 segment 段，每个 Segment 存着 message 信息。&lt;/li&gt;&#xA;&lt;li&gt;offset：指 Message 在 partition 中的偏移量，可理解为消息在 partition 中的索引&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://localhost:1313/images/2022Q2/img_2022-05-22_164440.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h3 id=&#34;存储设计&#34;&gt;&#xD;&#xA;  存储设计&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%98%e5%82%a8%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;partition 在物理上对应一个 log 文件夹，包含多个 segment 段，每个 segment 大小相等，&lt;strong&gt;顺序读写&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;segment 在物理上对应一个.log 数据文件和一个 .index 索引文件，文件以该段中最小的 offset 进行命名。&lt;/li&gt;&#xA;&lt;li&gt;Kafka 并没有为每条 Message 建立索引，而是采用了&lt;strong&gt;稀疏存储&lt;/strong&gt;的方式，每隔一定字节的数据建立一条索引。&lt;/li&gt;&#xA;&lt;li&gt;这样在查找指定 offset 的 Message 时，用&lt;strong&gt;二分查找&lt;/strong&gt;就可以快速定位到该 Message&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://localhost:1313/images/2022Q2/img_2022-05-22_164441.png&#34; width=&#34;650&#34;/&gt;</description>
    </item>
  </channel>
</rss>
