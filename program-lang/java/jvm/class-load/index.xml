<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>类加载 on IWiki</title>
    <link>https://localhost:1313/program-lang/java/jvm/class-load/</link>
    <description>Recent content in 类加载 on IWiki</description>
    <generator>Hugo</generator>
    <language>iwiki</language>
    <atom:link href="https://localhost:1313/program-lang/java/jvm/class-load/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>加载器</title>
      <link>https://localhost:1313/program-lang/java/jvm/class-load/loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/program-lang/java/jvm/class-load/loader/</guid>
      <description>&lt;h1 id=&#34;加载器&#34;&gt;&#xD;&#xA;  加载器&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%a0%e8%bd%bd%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;类加载&#34;&gt;&#xD;&#xA;  类加载&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b1%bb%e5%8a%a0%e8%bd%bd&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;虚拟机加载class文件到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的Class对象&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;类加载器&#34;&gt;&#xD;&#xA;  类加载器&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b1%bb%e5%8a%a0%e8%bd%bd%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现 “通过一个类的全限定名来获取描述此类的二进制字节流” 动作的代码模块，称为类加载器。&lt;/li&gt;&#xA;&lt;li&gt;相同的字节码被不同的类加载器加载的类不相等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;类加载器类型&#34;&gt;&#xD;&#xA;  类加载器类型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b1%bb%e5%8a%a0%e8%bd%bd%e5%99%a8%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;启动类加载器&lt;/p&gt;</description>
    </item>
    <item>
      <title>加载过程</title>
      <link>https://localhost:1313/program-lang/java/jvm/class-load/load-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/program-lang/java/jvm/class-load/load-process/</guid>
      <description>&lt;h1 id=&#34;加载过程&#34;&gt;&#xD;&#xA;  加载过程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%a0%e8%bd%bd%e8%bf%87%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;img src=&#34;https://localhost:1313/images/2022Q1/img_2022-03-22_113738.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h3 id=&#34;1加载&#34;&gt;&#xD;&#xA;  1、加载&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%8a%a0%e8%bd%bd&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过一个类的全限定名，获取定义此类的二进制字节流。&lt;/li&gt;&#xA;&lt;li&gt;将这个字节流所代表的静态存储结构，转化为方法区的运行时数据结构。&lt;/li&gt;&#xA;&lt;li&gt;在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区该类各种数据的访问入口。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2验证&#34;&gt;&#xD;&#xA;  2、验证&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e9%aa%8c%e8%af%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;阶段&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;文件格式验证&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;验证字节流是否符合 Class 文件格式的规范，确保能被当前虚拟机处理。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;元数据验证&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;对字节码进行语义验证，确保其描述信息符合 Java 语言规范的要求&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;字节码验证&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;通过数据流和控制流分析，确保程序语义是合法的、符合逻辑的&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;符号引用验证&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;验证符号引用是否为可用的直接引用，确保解析动作能正确执行。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3准备&#34;&gt;&#xD;&#xA;  3、准备&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为类变量（静态变量）分配内存，并将其初始化为系统默认值（零值）&lt;/li&gt;&#xA;&lt;li&gt;如果是 final 修饰的类变量，则会直接初始化设定的值。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4解析&#34;&gt;&#xD;&#xA;  4、解析&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e8%a7%a3%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将常量池内的符号引用替换为直接引用&lt;/li&gt;&#xA;&lt;li&gt;解析：类或接口、字段、类方法、接口方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5初始化&#34;&gt;&#xD;&#xA;  5、初始化&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5%e5%88%9d%e5%a7%8b%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;初始化阶段是执行类构造器 &amp;lt;clinit&amp;gt;() 方法的过程&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
