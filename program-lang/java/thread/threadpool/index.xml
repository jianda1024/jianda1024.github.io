<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>线程池 on Document</title>
    <link>https://jianda1024.github.io/program-lang/java/thread/threadpool/</link>
    <description>Recent content in 线程池 on Document</description>
    <generator>Hugo</generator>
    <language>doc</language>
    <atom:link href="https://jianda1024.github.io/program-lang/java/thread/threadpool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程池 - 原理</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/threadpool/threadpool-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/threadpool/threadpool-theory/</guid>
      <description>&lt;h1 id=&#34;线程池原理&#34;&gt;&#xD;&#xA;  线程池原理&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;核心参数&#34;&gt;&#xD;&#xA;  核心参数&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e5%8f%82%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建线程池主要是 ThreadPoolExecutor 类来完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q1/img_2022-02-25_085043.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h3 id=&#34;corepoolsize&#34;&gt;&#xD;&#xA;  corePoolSize&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#corepoolsize&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;核心线程数&lt;/li&gt;&#xA;&lt;li&gt;如果线程池中的线程数小于 corePoolSize，则会创建新线程来执行新提交的任务&lt;/li&gt;&#xA;&lt;li&gt;如果线程池中的线程数到达 corePoolSize，则不会创建新线程，而是把新任务放入到缓存队列当中&lt;/li&gt;&#xA;&lt;li&gt;类比：银行网点中，当值业务窗口数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;maximumpoolsize&#34;&gt;&#xD;&#xA;  maximumPoolSize&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#maximumpoolsize&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最大线程数量&lt;/li&gt;&#xA;&lt;li&gt;如果阻塞队列已满，且线程池中线程数量未超过 maximumPoolSize，就会创建新线程来执行新提交的任务&lt;/li&gt;&#xA;&lt;li&gt;类比：银行网点中，最大业务窗口数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;keepalivetimeunit&#34;&gt;&#xD;&#xA;  keepAliveTime、unit&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#keepalivetimeunit&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空闲线程的存活时间&lt;/li&gt;&#xA;&lt;li&gt;如果线程数量超过 corePoolSize，且多余空闲线程的存活时间超过 keepAliveTime 时，会销毁空闲的线程&lt;/li&gt;&#xA;&lt;li&gt;类比：银行网点中，加开的业务窗口，如果其空闲时间超过一定时限，则撤除&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;workqueue&#34;&gt;&#xD;&#xA;  workQueue&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#workqueue&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;阻塞队列&lt;/li&gt;&#xA;&lt;li&gt;用于保存被提交但尚未被执行的任务&lt;/li&gt;&#xA;&lt;li&gt;类比：银行网点中，等候区&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;threadfactory&#34;&gt;&#xD;&#xA;  threadFactory&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#threadfactory&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建线程的工厂类&lt;/li&gt;&#xA;&lt;li&gt;可定制线程，一般使用默认即可&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;handler&#34;&gt;&#xD;&#xA;  handler&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#handler&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;饱和策略&lt;/li&gt;&#xA;&lt;li&gt;如果阻塞队列满了，并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;策略&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;AbortPolicy&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认策略， 直接拒绝所提交的任务，并抛出RejectedExecutionException异常&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;CallerRunPolicy&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;用调用者所在的线程来执行任务&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;DiscardOldestPolicy&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;丢弃掉阻塞队列中存放时间最久的任务，执行当前任务&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;DiscardPolicy&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;不处理直接丢弃掉任务&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;工作过程&#34;&gt;&#xD;&#xA;  工作过程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e4%bd%9c%e8%bf%87%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建线程池后，等待提交过来的任务请求&lt;/li&gt;&#xA;&lt;li&gt;当调用 execute() 添加一个新任务时，线程池会做如下判断：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果当前运行的线程数量还小于 corePoolSize，则会创建新线程来执行新任务&lt;/li&gt;&#xA;&lt;li&gt;如果当前运行的线程数量不小于 corePoolSize，则会将提交的任务放入阻塞队列中&lt;/li&gt;&#xA;&lt;li&gt;如果当前阻塞队列满了，且当前运行的线程数量还小于 maximumPoolSize，则创建线程运行这个任务&lt;/li&gt;&#xA;&lt;li&gt;如果当前阻塞队列满了，且当前运行的线程数量不小于 maximumPoolSize，则启动拒绝策略&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;当一个线程完成任务时，它会从队列中取下一个任务来执行&lt;/li&gt;&#xA;&lt;li&gt;当一个线程空闲超过一定时间，并且此时当前运行的线程大于 corePoolSize 时，这个线程会被销毁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q1/img_2022-02-24_114157.png&#34; width=&#34;650&#34;/&gt;</description>
    </item>
    <item>
      <title>线程池 - 种类</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/threadpool/threadpool-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/threadpool/threadpool-type/</guid>
      <description>&lt;h1 id=&#34;常见线程池&#34;&gt;&#xD;&#xA;  常见线程池&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e8%a7%81%e7%ba%bf%e7%a8%8b%e6%b1%a0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;四种线程池&#34;&gt;&#xD;&#xA;  四种线程池&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9b%e7%a7%8d%e7%ba%bf%e7%a8%8b%e6%b1%a0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;newsinglethreadexecutor&#34;&gt;&#xD;&#xA;  newSingleThreadExecutor&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#newsinglethreadexecutor&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建一个单线程化的线程池&lt;/li&gt;&#xA;&lt;li&gt;它只会用唯一的工作线程来执行任务，保证所有任务都按照指定顺序执行&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ExecutorService&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;newSingleThreadExecutor&lt;/span&gt;()&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;FinalizableDelegatedExecutorService&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ThreadPoolExecutor(1,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1,&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;                                &lt;/span&gt;0L,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;MILLISECONDS&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;                                &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;LinkedBlockingQueue&amp;lt;Runnable&amp;gt;()));&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>线程池 - 操作</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/threadpool/threadpool-operate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/threadpool/threadpool-operate/</guid>
      <description>&lt;h1 id=&#34;线程池操作&#34;&gt;&#xD;&#xA;  线程池操作&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;executorservice&#34;&gt;&#xD;&#xA;  ExecutorService&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#executorservice&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;方法&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;execute()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;向线程池提交新任务，无返回值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;submit()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;向线程池提交新任务，返回 Future&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;shutdown()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1、停止接收新任务&lt;br/&gt;2、线程池中，已经提交的任务会继续执行，执行完毕后关闭线程池&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;shutdownNow()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1、停止接收新任务&lt;br/&gt;2、试图关闭正在执行的任务&lt;br/&gt;3、移除线程池队列中等待执行的任务&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;isShutdown()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;线程池是否关闭&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;isTerminated()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;判断线程池关闭后所有的任务是否都执行完了&lt;br/&gt;仅当 shutdown()/shutdownNow() 被调用后才有效&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;awaitTermination()&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;阻塞，直到以下情况出现：1、超时；2、当前线程中断；3、所有任务已经执行完成&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;创建线程池&#34;&gt;&#xD;&#xA;  创建线程池&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%9b%e5%bb%ba%e7%ba%bf%e7%a8%8b%e6%b1%a0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 ThreaPoolExecutor 构造函数，创建线程池，参数自定义&lt;/p&gt;</description>
    </item>
    <item>
      <title>定时线程池</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/threadpool/ScheduledThreadPoolExecutor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/threadpool/ScheduledThreadPoolExecutor/</guid>
      <description>&lt;h1 id=&#34;scheduledthreadpoolexecutor&#34;&gt;&#xD;&#xA;  ScheduledThreadPoolExecutor&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#scheduledthreadpoolexecutor&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>FutureTask</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/threadpool/FutureTask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/threadpool/FutureTask/</guid>
      <description>&lt;h1 id=&#34;futuretask&#34;&gt;&#xD;&#xA;  FutureTask&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#futuretask&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;</description>
    </item>
  </channel>
</rss>
