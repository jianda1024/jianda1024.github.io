<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IoC on Document</title>
    <link>https://localhost:1313/framework/spring/ioc/</link>
    <description>Recent content in IoC on Document</description>
    <generator>Hugo</generator>
    <language>doc</language>
    <atom:link href="https://localhost:1313/framework/spring/ioc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bean</title>
      <link>https://localhost:1313/framework/spring/ioc/bean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/framework/spring/ioc/bean/</guid>
      <description>&lt;h1 id=&#34;bean&#34;&gt;&#xD;&#xA;  Bean&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h3 id=&#34;bean-1&#34;&gt;&#xD;&#xA;  Bean&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是指由Spring IoC容器实例化、组装和管理的对象&lt;/li&gt;&#xA;&lt;li&gt;可以把 Spring IoC 容器看作是一个大工厂，Bean 就相当于工厂的产品&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;bean-作用域&#34;&gt;&#xD;&#xA;  Bean 作用域&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean-%e4%bd%9c%e7%94%a8%e5%9f%9f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于 prototype 作用域的 Bean 来说，Spring IoC 容器只负责创建&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;作用域&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;singleton&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认值，在 spring IoC 容器仅存在一个 Bean 实例&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;prototype&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;每次通过 Spring 容器获取 Bean 时，容器都会创建一个新的 Bean 实例&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;request&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;每次 HTTP 请求，容器都会创建一个 Bean 实例， 仅在当前 HTTP Request 内有效&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;session&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;同一个 HTTP Session 共享一个 Bean 实例，仅在当前 HTTP Session 内有效&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;application&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;同一个 Web 应用共享一个 Bean 实例，在当前 ServletContext 内有效&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;bean-生命周期&#34;&gt;&#xD;&#xA;  Bean 生命周期&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean-%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;实例化&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring 启动，加载类路径下配置文件，解析为 BeanDefinition 并装配到对应容器中&lt;/li&gt;&#xA;&lt;li&gt;查找并加载 Spring 管理的 Bean，进行 Bean 的实例化&lt;/li&gt;&#xA;&lt;li&gt;对于 prototype 作用域的 Bean 来说，Spring IoC 容器只负责创建，不会再跟踪其生命周期&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div/&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring 对 bean 进行依赖注入&lt;/li&gt;&#xA;&lt;li&gt;若 Bean 实现接口 BeanNameAware，则执行 setBeanName()，获取 bean 的名字&lt;/li&gt;&#xA;&lt;li&gt;若 Bean 实现接口 BeanFactoryAware，则执行 setBeanFactory()，获取 BeanFactory&lt;/li&gt;&#xA;&lt;li&gt;若 Bean 实现接口 ApplicationContextAware，则执行 setApplicationContext()，获取应用上下文；&lt;/li&gt;&#xA;&lt;li&gt;若 Bean 实现接口 BeanPostProcessor，则先执行 postProcessBeforeInitialization()；&lt;/li&gt;&#xA;&lt;li&gt;若 Bean 实现接口 InitializingBean，则执行 afterPropertiesSet()；&lt;/li&gt;&#xA;&lt;li&gt;在 xml 文件中，若 Bean 配置了 init-method，则执行自定义方法；&lt;/li&gt;&#xA;&lt;li&gt;若 Bean 实现接口 BeanPostProcessor，则先执行 postProcessAfterInitialization()；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div/&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;此时 Bean 已经准备就绪，可以被使用了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div/&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;销毁&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bean 定义</title>
      <link>https://localhost:1313/framework/spring/ioc/bean-definition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/framework/spring/ioc/bean-definition/</guid>
      <description>&lt;h1 id=&#34;bean-定义&#34;&gt;&#xD;&#xA;  Bean 定义&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean-%e5%ae%9a%e4%b9%89&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h3 id=&#34;开启组件扫描&#34;&gt;&#xD;&#xA;  开启组件扫描&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e5%90%af%e7%bb%84%e4%bb%b6%e6%89%ab%e6%8f%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;application.xml&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;beans&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:context=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://www.springframework.org/schema/context&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#658b00&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://www.springframework.org/schema/beans&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;           http://www.springframework.org/schema/context&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;           http://www.springframework.org/schema/context/spring-context.xsd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- 开启组件扫描，指定了 base-package 扫描的包 --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;base-package=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;xxx.xxx.xxx&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Bean 注入</title>
      <link>https://localhost:1313/framework/spring/ioc/bean-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/framework/spring/ioc/bean-injection/</guid>
      <description>&lt;h1 id=&#34;bean-注入&#34;&gt;&#xD;&#xA;  Bean 注入&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean-%e6%b3%a8%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h3 id=&#34;自动装配方式&#34;&gt;&#xD;&#xA;  自动装配方式&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e8%a3%85%e9%85%8d%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;方式&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;no&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认模式，没有自动装配&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;byName&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;由属性名自动装配。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;byType&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;由属性数据类型自动装配。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;constructor&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;类似于 byType，但该类型适用于构造函数参数类型。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Autodetect&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;首先尝试通过 constructor 使用自动装配来连接，如果它不执行，再尝试通过 byType 来自动装配。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;bean-注入-1&#34;&gt;&#xD;&#xA;  Bean 注入&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bean-%e6%b3%a8%e5%85%a5-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@Resource、@Autowired 两者功能相同，都可以标注在字段和setter方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;autowired&#34;&gt;&#xD;&#xA;  @Autowired&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#autowired&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring 提供的注解&lt;/li&gt;&#xA;&lt;li&gt;默认按 byType 方式进行装配&lt;/li&gt;&#xA;&lt;li&gt;可配合 @Qualifier，改为按 byName 方式进行装配&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;resource&#34;&gt;&#xD;&#xA;  @Resource&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#resource&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;J2EE 提供的注解，Spring 做了支持&lt;/li&gt;&#xA;&lt;li&gt;默认按 byName 方式进行装配&lt;/li&gt;&#xA;&lt;li&gt;属性 name 和 type，装配顺序：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果同时指定了 name 和 type，则寻找唯一匹配的 bean 进行装配&lt;/li&gt;&#xA;&lt;li&gt;如果指定了 name，则按 byName 方式进行装配&lt;/li&gt;&#xA;&lt;li&gt;如果指定了 type，按 byType 方式进行装配&lt;/li&gt;&#xA;&lt;li&gt;如果未指定 name 和 type，则按 byName 方式进行装配&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
