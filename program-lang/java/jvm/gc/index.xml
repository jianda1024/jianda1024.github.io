<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>垃圾回收 on IWiki</title>
    <link>https://jianda1024.github.io/program-lang/java/jvm/gc/</link>
    <description>Recent content in 垃圾回收 on IWiki</description>
    <generator>Hugo</generator>
    <language>iwiki</language>
    <atom:link href="https://jianda1024.github.io/program-lang/java/jvm/gc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>引用类型</title>
      <link>https://jianda1024.github.io/program-lang/java/jvm/gc/reference-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/jvm/gc/reference-type/</guid>
      <description>&lt;h1 id=&#34;引用类型&#34;&gt;&#xD;&#xA;  引用类型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%95%e7%94%a8%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h3 id=&#34;强引用&#34;&gt;&#xD;&#xA;  强引用&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%ba%e5%bc%95%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指普通的对象引用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 对于具有强引用的对象，就算出现OOM，垃圾回收器也不会对该对象进行回收。&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;Object&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;strongReference&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Object();&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 只有当强引用和对象之间的关联被中断时，对象才会被回收&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;strongReference&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>判定算法</title>
      <link>https://jianda1024.github.io/program-lang/java/jvm/gc/judge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/jvm/gc/judge/</guid>
      <description>&lt;h1 id=&#34;判定算法&#34;&gt;&#xD;&#xA;  判定算法&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a4%e5%ae%9a%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;引用计数法&#34;&gt;&#xD;&#xA;  引用计数法&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%95%e7%94%a8%e8%ae%a1%e6%95%b0%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原理：通过计算引用的数量，来判断一个对象是否可以回收&lt;/li&gt;&#xA;&lt;li&gt;缺陷：不能解决对象间循环引用的问题&lt;/li&gt;&#xA;&lt;li&gt;实现：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给对象添加一个引用计数器，记录引用该对象的次数&lt;/li&gt;&#xA;&lt;li&gt;当有地方引用该对象时，计数器加 1。当引用失效时，计数器减 1。&lt;/li&gt;&#xA;&lt;li&gt;当计数器值为 0 时，代表为垃圾对象，就会被 GC 进行回收。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;可达性分析法&#34;&gt;&#xD;&#xA;  可达性分析法&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e8%be%be%e6%80%a7%e5%88%86%e6%9e%90%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;原理：通过判断对象是否可到达，来决定对象是否可以被回收&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;实现：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过一系列的名为GC Roots的对象作为起始点。&lt;/li&gt;&#xA;&lt;li&gt;从这些节点开始向下搜索，搜索所走过的路径称为引用链。&lt;/li&gt;&#xA;&lt;li&gt;当从 GC Roots 到一个对象不可达时，则证明此对象是不可用的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;可以作为 GC Roots 的对象&lt;/p&gt;</description>
    </item>
    <item>
      <title>回收算法</title>
      <link>https://jianda1024.github.io/program-lang/java/jvm/gc/collect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/jvm/gc/collect/</guid>
      <description>&lt;h1 id=&#34;回收算法&#34;&gt;&#xD;&#xA;  回收算法&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9e%e6%94%b6%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h3 id=&#34;标记---清除mark-sweep&#34;&gt;&#xD;&#xA;  标记 - 清除（Mark-Sweep）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%87%e8%ae%b0---%e6%b8%85%e9%99%a4mark-sweep&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;原理：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标记：扫描内存空间，对存活的对象进行标记&lt;/li&gt;&#xA;&lt;li&gt;清除：扫描内存空间，回收未标记的对象。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;缺点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;两次扫描，效率低&lt;/li&gt;&#xA;&lt;li&gt;会产生内存碎片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q2/img_2022-04-01_111150.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h3 id=&#34;标记---整理mark-compact&#34;&gt;&#xD;&#xA;  标记 - 整理（Mark-Compact）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%87%e8%ae%b0---%e6%95%b4%e7%90%86mark-compact&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;原理：&lt;/p&gt;</description>
    </item>
    <item>
      <title>垃圾收集器</title>
      <link>https://jianda1024.github.io/program-lang/java/jvm/gc/collector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/jvm/gc/collector/</guid>
      <description>&lt;h1 id=&#34;垃圾收集器&#34;&gt;&#xD;&#xA;  垃圾收集器&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9e%83%e5%9c%be%e6%94%b6%e9%9b%86%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;回收方式&#34;&gt;&#xD;&#xA;  回收方式&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9e%e6%94%b6%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;串行（Serial）、并行（Parallel）、并发（Concurrent）、STW&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q2/img_2022-04-02_123436.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h2 id=&#34;七大收集器&#34;&gt;&#xD;&#xA;  七大收集器&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%83%e5%a4%a7%e6%94%b6%e9%9b%86%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q2/img_2022-04-02_123516.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h3 id=&#34;收集器serial-serial-old&#34;&gt;&#xD;&#xA;  收集器：Serial 、Serial Old&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%b6%e9%9b%86%e5%99%a8serial-serial-old&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单个垃圾收集线程&lt;strong&gt;串行&lt;/strong&gt;工作，会暂停所有用户线程，不适合服务器环境&lt;/li&gt;&#xA;&lt;li&gt;Serial：新生代，复制算法&lt;/li&gt;&#xA;&lt;li&gt;Serial Old：老年代，标记 - 整理算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q2/img_2022-04-02_123555.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h3 id=&#34;收集器parnew&#34;&gt;&#xD;&#xA;  收集器：ParNew&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%b6%e9%9b%86%e5%99%a8parnew&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Serial 收集器的&lt;strong&gt;多线程&lt;/strong&gt;（即并行）版本&lt;/li&gt;&#xA;&lt;li&gt;ParNew：新生代，复制算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q2/img_2022-04-02_123556.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h3 id=&#34;收集器parallel-scavenge--old&#34;&gt;&#xD;&#xA;  收集器：Parallel Scavenge / Old&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%b6%e9%9b%86%e5%99%a8parallel-scavenge--old&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多个垃圾收集线程&lt;strong&gt;并行&lt;/strong&gt;工作，会暂停所有用户线程，适合科学算/大数据处理等弱交互场景&lt;/li&gt;&#xA;&lt;li&gt;Parallel Scavenge：新生代，复制算法，可控制吞吐量&lt;/li&gt;&#xA;&lt;li&gt;Parallel Old：老年代，标记 - 整理算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q2/img_2022-04-02_123557.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h3 id=&#34;收集器cms&#34;&gt;&#xD;&#xA;  收集器：CMS&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%b6%e9%9b%86%e5%99%a8cms&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;概述&#34;&gt;&#xD;&#xA;  概述&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户线程和垃圾收集线程&lt;strong&gt;并发&lt;/strong&gt;执行，互联网公司多用它，适用对响应时间有要求的场景&lt;/li&gt;&#xA;&lt;li&gt;Concurrent Mark Sweep：老年代，标记 - 清除算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;优缺点&#34;&gt;&#xD;&#xA;  优缺点&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e7%bc%ba%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;并发收集低停顿，但对CPU资源压力大，且会产生大量碎片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;步骤&#34;&gt;&#xD;&#xA;  步骤&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%ad%a5%e9%aa%a4&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;初始标记（CMS initial mark）&lt;/li&gt;&#xA;&lt;li&gt;并发标记（CMS concurrent mark）&lt;/li&gt;&#xA;&lt;li&gt;重新标记（CMS remark）&lt;/li&gt;&#xA;&lt;li&gt;并发清除（CMS concurrent sweep）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q2/img_2022-04-02_123558.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h3 id=&#34;收集器g1&#34;&gt;&#xD;&#xA;  收集器：G1&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%b6%e9%9b%86%e5%99%a8g1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;概述-1&#34;&gt;&#xD;&#xA;  概述&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e8%bf%b0-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将堆内存分割成不同的区域然后并发的对其进行垃圾回收&lt;/li&gt;&#xA;&lt;li&gt;面向服务端应用，适用于多处理器和大容量内存环境&lt;/li&gt;&#xA;&lt;li&gt;G1：整体上采用标记-整理算法，局部是采用复制算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;步骤-1&#34;&gt;&#xD;&#xA;  步骤&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%ad%a5%e9%aa%a4-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;初始标记（Initial Marking）&lt;/li&gt;&#xA;&lt;li&gt;并发标记（Concurrent Marking）&lt;/li&gt;&#xA;&lt;li&gt;最终标记（Final Marking）&lt;/li&gt;&#xA;&lt;li&gt;筛选回收（Live Data Counting and Evacuation）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q2/img_2022-04-02_123559.png&#34; width=&#34;650&#34;/&gt;&#xD;&#xA;&lt;h4 id=&#34;原理&#34;&gt;&#xD;&#xA;  原理&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Garbage First&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
