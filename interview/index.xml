<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IWiki on Interview</title>
    <link>https://jianda1024.github.io/interview/</link>
    <description>Recent content in IWiki on Interview</description>
    <generator>Hugo</generator>
    <language>interview</language>
    <atom:link href="https://jianda1024.github.io/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git</title>
      <link>https://jianda1024.github.io/interview/13_dev-tool/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/13_dev-tool/git/</guid>
      <description>&lt;h2 id=&#34;---版本控制&#34;&gt;&#xD;&#xA;  &amp;ndash; 版本控制&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SVN：是基于&lt;strong&gt;差异&lt;/strong&gt;的版本控制，存储的是一组基本文件和每个文件随时间逐步累积的差异&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;优缺点：节省磁盘空间，耗时、效率低。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;不适合的领域：跨地域的协同开发、追求高质量代码和代码门禁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2024Q2/img_2024-04-02_000538.png&#34; width=&#34;650&#34;&gt;&#xD;&#xA;&lt;br/&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Git：是基于&lt;strong&gt;快照&lt;/strong&gt;的版本控制，存储的是文件的一系列快照&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;优缺点：版本切换时非常快，占用磁盘空间较大&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;不适合的领域：目录级别的读授权、word等二进制文档的版本控制&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2024Q2/img_2024-04-02_000633.png&#34; width=&#34;650&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;---git-工作流程&#34;&gt;&#xD;&#xA;  &amp;ndash; Git 工作流程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---git-%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;工作区：日常工作的工程目录&lt;/p&gt;</description>
    </item>
    <item>
      <title>Part.1</title>
      <link>https://jianda1024.github.io/interview/04_jvm/java-jvm/p1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/04_jvm/java-jvm/p1/</guid>
      <description>&lt;h2 id=&#34;---jvm-结构&#34;&gt;&#xD;&#xA;  &amp;ndash; JVM 结构&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---jvm-%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;类加载器，Class Loader&lt;/li&gt;&#xA;&lt;li&gt;执行引擎，Execution Engine&lt;/li&gt;&#xA;&lt;li&gt;运行时数据区，Runtime Data Area&lt;/li&gt;&#xA;&lt;li&gt;本地方法接口，Native Interface&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q1/img_2022-03-22_110830.png&#34; width=&#34;650&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;---类加载过程&#34;&gt;&#xD;&#xA;  &amp;ndash; 类加载过程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e7%b1%bb%e5%8a%a0%e8%bd%bd%e8%bf%87%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2024Q3/img_2024-07-31_010006.png&#34; width=&#34;900&#34;/&gt;&#xD;&#xA;&lt;h2 id=&#34;---类加载机制&#34;&gt;&#xD;&#xA;  &amp;ndash; 类加载机制&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e7%b1%bb%e5%8a%a0%e8%bd%bd%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;双亲委派模式&lt;/p&gt;</description>
    </item>
    <item>
      <title>Part.1</title>
      <link>https://jianda1024.github.io/interview/05_programming/java-base/p1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/05_programming/java-base/p1/</guid>
      <description>&lt;h2 id=&#34;---面向过程面向对象&#34;&gt;&#xD;&#xA;  &amp;ndash; 面向过程、面向对象&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e9%9d%a2%e5%90%91%e8%bf%87%e7%a8%8b%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;面向过程&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是一种以过程为中心的编程思想&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;面向对象&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是一种以对象为中心的编程思想&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;把构成问题的事务分解成各个对象，建立对象，来描述某个事物在解决整个问题的过程中所发生的行为&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---四种引用类型&#34;&gt;&#xD;&#xA;  &amp;ndash; 四种引用类型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e5%9b%9b%e7%a7%8d%e5%bc%95%e7%94%a8%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;引用类型&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;强引用&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;最常见的引用类型，引用存在时，对象不会被回收&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;软引用&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;适用于内存敏感的缓存，当内存不足时，对象才会被回收&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;弱引用&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;适用于非重要对象，当垃圾收集器运行时，对象就可能被回收&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;虚引用&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;适用于对象回收跟踪，就和没有引用一样，在任何时候都可能被回收&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 强引用&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;strongRef&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 软引用&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;SoftReference&amp;lt;String&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;softRef&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;SoftReference&amp;lt;&amp;gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 弱引用&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;WeakReference&amp;lt;String&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;weakRef&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;WeakReference&amp;lt;&amp;gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 虚引用&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;ReferenceQueue&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;queue&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ReferenceQueue();&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;PhantomReference&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;phantomRef&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;PhantomReference(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;queue);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Part.1</title>
      <link>https://jianda1024.github.io/interview/07_concurrent/java-thread/p1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/07_concurrent/java-thread/p1/</guid>
      <description>&lt;h2 id=&#34;---程序进程线程&#34;&gt;&#xD;&#xA;  &amp;ndash; 程序、进程、线程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e7%a8%8b%e5%ba%8f%e8%bf%9b%e7%a8%8b%e7%ba%bf%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;程序&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是含有指令和数据的文件，存储在硬件设备中，因此程序是静态的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进程&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是程序的一次执行过程，是程序的一个运行实例，因此进程是动态的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;进程之间是相互独立的，各自有自己独立的内存空间和系统资源&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;线程&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是指在一个进程内的独立执行路径。一个进程可以包含多个线程。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;每个线程都是独立运行的，有自己的执行顺序和状态。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;多个线程可以共享内存空间和系统资源。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---创建线程的方式&#34;&gt;&#xD;&#xA;  &amp;ndash; 创建线程的方式&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e5%88%9b%e5%bb%ba%e7%ba%bf%e7%a8%8b%e7%9a%84%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;继承Thread类&lt;/li&gt;&#xA;&lt;li&gt;实现Runnable接口&lt;/li&gt;&#xA;&lt;li&gt;实现Callable接口&lt;/li&gt;&#xA;&lt;li&gt;使用线程池创建&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---停止线程的方式&#34;&gt;&#xD;&#xA;  &amp;ndash; 停止线程的方式&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e5%81%9c%e6%ad%a2%e7%ba%bf%e7%a8%8b%e7%9a%84%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用退出标志，使线程正常退出&lt;/li&gt;&#xA;&lt;li&gt;使用interrupt()方法中断线程&lt;/li&gt;&#xA;&lt;li&gt;使用stop()方法强行终止，但不推荐，可能会产生不可预料的结果&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---线程安全&#34;&gt;&#xD;&#xA;  &amp;ndash; 线程安全&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果在多线程下执行和在单线程下执行永远都能获得一样的结果，那么代码就是线程安全的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---并发三特性&#34;&gt;&#xD;&#xA;  &amp;ndash; 并发三特性&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e5%b9%b6%e5%8f%91%e4%b8%89%e7%89%b9%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;原子性&lt;/p&gt;</description>
    </item>
    <item>
      <title>Part.1</title>
      <link>https://jianda1024.github.io/interview/08_framework/spring/p1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/08_framework/spring/p1/</guid>
      <description>&lt;h2 id=&#34;---spring&#34;&gt;&#xD;&#xA;  &amp;ndash; Spring&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---spring&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring 是一个开源的轻量级 Java 开发框架&lt;/li&gt;&#xA;&lt;li&gt;Spring 的核心是控制反转（IoC）和面向切面（AOP）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---spring-优点&#34;&gt;&#xD;&#xA;  &amp;ndash; Spring 优点&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---spring-%e4%bc%98%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;div style=&#34;font-weight:400&#34;&gt;方便解耦，简化开发&lt;/div&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;div style=&#34;font-weight:400&#34;&gt;用户可以将所有对象的创建和依赖关系的维护，交给Spring管理&lt;/div&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;支持AOP编程&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;支持声明式事务&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;只需要通过配置就可以完成对事务的管理，而无需手动编程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;方便程序测试&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Spring对Junit4支持，可以通过注解方便的测试Spring程序&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;集成各种优秀框架&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Spring内部提供了对各种优秀框架的直接支持&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;简化JavaEE的使用&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Spring对JavaEE开发中非常难用的一些API，都提供了封装，降低了使用难度&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;---ioc&#34;&gt;&#xD;&#xA;  &amp;ndash; IoC&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---ioc&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Inversion of Control，即“控制反转”，是一种设计思想，用于解决对象之间的耦合问题。&lt;/li&gt;&#xA;&lt;li&gt;以前对象的创建及依赖关系是由开发人员自己维护，现在反转交给 spring 来完成创建及注入&lt;/li&gt;&#xA;&lt;li&gt;控制：指的是对象创建（实例化、管理）的权利&lt;/li&gt;&#xA;&lt;li&gt;反转：控制权交给外部环境了（spring框架、IoC容器）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---ioc-容器&#34;&gt;&#xD;&#xA;  &amp;ndash; IoC 容器&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---ioc-%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;具有依赖注入功能的容器，它可以创建对象，负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖&lt;/li&gt;&#xA;&lt;li&gt;IoC容器底层其实就是一个Bean工厂，Spring提供了两种IoC容器，即BeanFactory、ApplicationContext&lt;/li&gt;&#xA;&lt;li&gt;BeanFactory：最简单的IoC容器，它提供了IoC容器最基本的功能&lt;/li&gt;&#xA;&lt;li&gt;ApplicationContext：BeanFactory的子接口，并添加了更多的企业特定的功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---iocdi&#34;&gt;&#xD;&#xA;  &amp;ndash; IoC、DI&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---iocdi&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DI，Dependency Injection，即“依赖注入”，由容器动态的将某个依赖关系注入到组件之中。&lt;/li&gt;&#xA;&lt;li&gt;IoC 是一种软件设计思想，DI 是这种软件设计思想的一个实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---aop&#34;&gt;&#xD;&#xA;  &amp;ndash; AOP&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---aop&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Aspect Oriented Programming，面向切面编程，是一种编程思想&lt;/li&gt;&#xA;&lt;li&gt;是通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术&lt;/li&gt;&#xA;&lt;li&gt;在面向对象编程(OOP)中，基本单元是类(class)，而 AOP 中的基本单元是切面(aspect)&lt;/li&gt;&#xA;&lt;li&gt;OOP是解决了纵向的代码复用问题，AOP是解决了横向的代码复用问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---aop-术语&#34;&gt;&#xD;&#xA;  &amp;ndash; AOP 术语&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---aop-%e6%9c%af%e8%af%ad&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;术语&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;名称&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Jointpoint&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;连接点&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;程序类中，允许插入通知（Advice）的位置点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Pointcut&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;切入点&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;程序类中，已经插入通知（Advice）的位置点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Advice&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;通知&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在切入点（Pointcut）上要执行的代码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Aspect&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;切面&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;是切入点（Pointcut）和通知（Advice）的结合&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Target&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;目标&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;被织入通知（Advice）的目标对象，这个对象永远是一个被代理对象&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Weaving&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;织入&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;将通知（Advice）添加到目标类具体连接点上的过程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;---aop-通知类型&#34;&gt;&#xD;&#xA;  &amp;ndash; AOP 通知类型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---aop-%e9%80%9a%e7%9f%a5%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;通知&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;备注&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;around&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;环绕通知&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在建议方法调用之前和之后，执行通知。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;before&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;前置通知&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在一个方法执行之前，执行通知。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;after&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;后置通知&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在一个方法执行之后，不考虑其结果，执行通知。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;after-returning&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;正常返回通知&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在一个方法执行之后，只有在方法成功完成时，才能执行通知。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;after-throwing&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;异常返回通知&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;---bean&#34;&gt;&#xD;&#xA;  &amp;ndash; Bean&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---bean&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bean是指由Spring IoC容器实例化、组装和管理的对象&lt;/li&gt;&#xA;&lt;li&gt;可以把Spring IoC容器看作是一个大工厂，Bean就相当于工厂的产品&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---bean-作用域&#34;&gt;&#xD;&#xA;  &amp;ndash; Bean 作用域&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---bean-%e4%bd%9c%e7%94%a8%e5%9f%9f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于prototype作用域的Bean来说，Spring IoC 容器只负责创建&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;作用域&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;singleton&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认值，在 spring IoC 容器仅存在一个 Bean 实例&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;prototype&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;每次通过 Spring 容器获取 Bean 时，容器都会创建一个新的 Bean 实例&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;request&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;每次 HTTP 请求，容器都会创建一个 Bean 实例， 仅在当前 HTTP Request 内有效&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;session&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;同一个 HTTP Session 共享一个 Bean 实例，仅在当前 HTTP Session 内有效&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;application&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;同一个 Web 应用共享一个 Bean 实例，在当前 ServletContext 内有效&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---bean-生命周期&#34;&gt;&#xD;&#xA;  &amp;ndash; Bean 生命周期&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---bean-%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;实例化&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络</title>
      <link>https://jianda1024.github.io/interview/05_programming/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/05_programming/network/</guid>
      <description>&lt;h2 id=&#34;---网络模型&#34;&gt;&#xD;&#xA;  &amp;ndash; 网络模型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e7%bd%91%e7%bb%9c%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2024Q1/img_2024-03-18_223615.png&#34; width=&#34;650&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;---tcp-协议&#34;&gt;&#xD;&#xA;  &amp;ndash; TCP 协议&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---tcp-%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. Transmission Control Protocol，传输控制协议&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 是面向连接的协议，在收发数据前，必须和对方建立可靠的连接。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 一个TCP连接必须有三次握手、四次挥手&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;---tcp-三次握手&#34;&gt;&#xD;&#xA;  &amp;ndash; TCP 三次握手&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---tcp-%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;三次握手：Three-way Handshake，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux</title>
      <link>https://jianda1024.github.io/interview/05_programming/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/05_programming/linux/</guid>
      <description>&lt;h2 id=&#34;---目录路径&#34;&gt;&#xD;&#xA;  &amp;ndash; 目录路径&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e7%9b%ae%e5%bd%95%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;绝对路径： /etc/init.d&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;当前目录： ./&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;上层目录： ../&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;主目录：   ~/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;切换目录： cd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;---命令查看文件&#34;&gt;&#xD;&#xA;  &amp;ndash; 命令：查看文件&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e5%91%bd%e4%bb%a4%e6%9f%a5%e7%9c%8b%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vi   文件名    &lt;span style=&#34;color:#228b22&#34;&gt;#编辑方式查看，可修改&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat  文件名    &lt;span style=&#34;color:#228b22&#34;&gt;#显示全部文件内容&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ more 文件名    &lt;span style=&#34;color:#228b22&#34;&gt;#分页显示文件内容&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ less 文件名    &lt;span style=&#34;color:#228b22&#34;&gt;#与 more 相似，更好的是可以往前翻页&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tail 文件名    &lt;span style=&#34;color:#228b22&#34;&gt;#仅查看尾部，还可以指定行数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ head 文件名    &lt;span style=&#34;color:#228b22&#34;&gt;#仅查看头部,还可以指定行数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Maven</title>
      <link>https://jianda1024.github.io/interview/13_dev-tool/maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/13_dev-tool/maven/</guid>
      <description>&lt;h2 id=&#34;---maven&#34;&gt;&#xD;&#xA;  &amp;ndash; Maven&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---maven&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;是一款纯 java 开发的、用于项目构建和管理的工具&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;作用：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 添加第三方jar包&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 处理jar包之间的依赖关系&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 获取第三方jar包&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4. 将项目拆分为多个工程模块&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---maven-生命周期&#34;&gt;&#xD;&#xA;  &amp;ndash; Maven 生命周期&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---maven-%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;阶段&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;处理&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;validate&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;验证&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;验证项目是否正确，且所有必须信息是可用的&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;compile&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;编译&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;编译源代码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;test&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;测试&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;使用单元测试框架运行测试&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;package&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;打包&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;创建jar/war包&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;verify&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;检查&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;对集成测试结果进行检查，以保证质量达标&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;install&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;安装&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;安装打包的项目到本地仓库，以供其他项目使用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;deploy&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;部署&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;拷贝最终的工程包到远程仓库，以共享给其他工程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;---maven-常用命令&#34;&gt;&#xD;&#xA;  &amp;ndash; Maven 常用命令&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---maven-%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvn clean             &lt;span style=&#34;color:#228b22&#34;&gt;# 清除项目目录中的生成结果&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvn compile           &lt;span style=&#34;color:#228b22&#34;&gt;# 编译源代码&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvn test-compile      &lt;span style=&#34;color:#228b22&#34;&gt;# 编译测试源代码&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvn &lt;span style=&#34;color:#658b00&#34;&gt;test&lt;/span&gt;              &lt;span style=&#34;color:#228b22&#34;&gt;# 运行应用程序中的单元测试&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvn package           &lt;span style=&#34;color:#228b22&#34;&gt;# 根据项目生成的jar&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvn install           &lt;span style=&#34;color:#228b22&#34;&gt;# 在本地Repository中安装jar&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvn deploy            &lt;span style=&#34;color:#228b22&#34;&gt;# 发布项目&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 启动tomcat服务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvntomcat:run&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 清除以前的包后重新打包，跳过测试类&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvn clean package -Dmaven.test.skip=&lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Part.2</title>
      <link>https://jianda1024.github.io/interview/04_jvm/java-jvm/p2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/04_jvm/java-jvm/p2/</guid>
      <description>&lt;h2 id=&#34;---jvm-调优工具&#34;&gt;&#xD;&#xA;  &amp;ndash; JVM 调优工具&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---jvm-%e8%b0%83%e4%bc%98%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;jconsole&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;JDK中自带的java监控和管理控制台&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;用于对JVM中内存，线程和类等的监控&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;jvisualvm&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jdk自带全能工具&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;可以分析内存快照、线程快照；监控内存变化、GC变化等&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;MAT&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Memory Analyzer Tool&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;一个基于Eclipse的内存分析工具&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;可以帮助查找内存泄漏和减少内存消耗&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;GChisto&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;一款专业分析gc日志的工具&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Part.2</title>
      <link>https://jianda1024.github.io/interview/05_programming/java-base/p2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/05_programming/java-base/p2/</guid>
      <description>&lt;h2 id=&#34;---equals&#34;&gt;&#xD;&#xA;  &amp;ndash; equals、==&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---equals&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;==&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是一个运算符，用于比较两个对象的引用是否指向同一个内存地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;对于基本数据类型，比较的是值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;对于引用数据类型，比较的是内存地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;equals&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;是一个定义在 Object 类中的方法，用于比较两个对象的内容是否相等&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;默认情况下，equals 与 == 等同，但许多类会重写 equals 方法&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---final&#34;&gt;&#xD;&#xA;  &amp;ndash; final&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---final&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;修饰符，可以修饰类、变量、方法&lt;/p&gt;</description>
    </item>
    <item>
      <title>Part.2</title>
      <link>https://jianda1024.github.io/interview/07_concurrent/java-thread/p2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/07_concurrent/java-thread/p2/</guid>
      <description>&lt;h2 id=&#34;---volatile&#34;&gt;&#xD;&#xA;  &amp;ndash; volatile&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---volatile&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;volatile&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 是java提供的一种轻量级同步机制&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 用于修饰变量，保证所修饰变量的可见性，不保证原子性&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 会禁止指令重排优化&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;底层原理&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 当对volatile变量进行写操作的时候，JVM会增加Lock前缀指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 基于缓存一致性协议，cpu会检查缓存是否过期，如果过期，则重新读取系统内存数据&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 缓存一致性：每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---synchronized&#34;&gt;&#xD;&#xA;  &amp;ndash; synchronized&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---synchronized&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;synchronized&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringCloud</title>
      <link>https://jianda1024.github.io/interview/09_service/spring-cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/09_service/spring-cloud/</guid>
      <description>&lt;h2 id=&#34;---springcloud&#34;&gt;&#xD;&#xA;  &amp;ndash; SpringCloud&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---springcloud&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的有序集合&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q2/img_2022-05-20_202442.png&#34; width=&#34;900&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;---springbootspringcloud&#34;&gt;&#xD;&#xA;  &amp;ndash; SpringBoot、SpringCloud&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---springbootspringcloud&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SpringBoot：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;专注于快速方便的开发单个个体微服务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SpringCloud：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;关注全局的微服务协调治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖的关系&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;---雪崩效应&#34;&gt;&#xD;&#xA;  &amp;ndash; 雪崩效应&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---%e9%9b%aa%e5%b4%a9%e6%95%88%e5%ba%94&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 分布式系统环境下，各服务之前有依赖关系&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 由于各种原因，服务不能保证100%可用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 如果单个服务不可用，会导致依赖于它的服务不可用，如此循环导致更多的服务不可用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4. 这种将不可用逐渐放大导致系统崩溃的现象，即雪崩效应&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Part.3</title>
      <link>https://jianda1024.github.io/interview/05_programming/java-base/p3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/05_programming/java-base/p3/</guid>
      <description>&lt;h2 id=&#34;---hashmap-的工作原理&#34;&gt;&#xD;&#xA;  &amp;ndash; HashMap 的工作原理&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---hashmap-%e7%9a%84%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;底层数据结构&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HashMap 底层是由数组和单向链表实现，数组中的每个元素都是链表，由 Node 内部类实现&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HashMap 通过 put &amp;amp; get 方法存储和获取元素对象&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;存储对象时，将 K/V 键值传给 put() 方法&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1、调用 hash(K)方法计算 K的 hash值，然后结合数组长度，计算得数组下标；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2、判断数组该下标节点是否存在：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   A. 如果不存在，则新增节点，直接执行插入&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   B. 如果已存在，即为发生哈希碰撞，则遍历该位置的链表，对比判断 K值、hash值，是否在链表节点中已经存在：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      a. 如果已存在，则更新链表节点的键值对；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      b. 如果不存在，则新增节点，插入链表的尾部（尾插法）或者红黑树中（树的添加方式）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3、判断是否需要扩容，调整数组大小；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Tomcat</title>
      <link>https://jianda1024.github.io/interview/13_dev-tool/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/13_dev-tool/tomcat/</guid>
      <description>&lt;h2 id=&#34;---tomcat&#34;&gt;&#xD;&#xA;  &amp;ndash; Tomcat&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---tomcat&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是一个免费开源的轻量级Web应用服务器&lt;/li&gt;&#xA;&lt;li&gt;默认端口：8080&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---tomcat-部署方式&#34;&gt;&#xD;&#xA;  &amp;ndash; Tomcat 部署方式&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---tomcat-%e9%83%a8%e7%bd%b2%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 Tomcat 的自动部署&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;将web应用拷贝到webapps目录。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;当Tomcat启动时，会自动部署应用。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 Manager 应用部署&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;进入Tomcat主页的Manager App控制台，可以指定一个web应用的路径或war文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;修改 conf/server.xml 文件部署&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nginx</title>
      <link>https://jianda1024.github.io/interview/09_service/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/09_service/nginx/</guid>
      <description>&lt;h2 id=&#34;---nginx&#34;&gt;&#xD;&#xA;  &amp;ndash; Nginx&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---nginx&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;是一个开源的高性能 HTTP 服务器和反向代理服务器&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;优点：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 高并发、高可靠性、低内存消耗&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 配置简单、支持热部署&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 良好的负载均衡和缓存功能&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---nginx-处理http请求&#34;&gt;&#xD;&#xA;  &amp;ndash; Nginx 处理HTTP请求&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---nginx-%e5%a4%84%e7%90%86http%e8%af%b7%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Nginx 是一个高性能的 Web 服务器，能够同时处理大量的并发请求&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 多进程机制&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Nginx包含一个主进程和多个工作进程。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;主进程主要负责调度管理工作进程，工作进程则负责处理用户的请求&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 异步非阻塞机制&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;工作进程接收到客户端的请求以后，会调用IO进行处理，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;当发生等待时，工作线程会注册一个事件，转而去处理其他的请求&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;当IO返回时，就会触发该事件，工作线程会继续执行该未完成的请求&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Dubbo</title>
      <link>https://jianda1024.github.io/interview/09_service/dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/09_service/dubbo/</guid>
      <description>&lt;h2 id=&#34;---dubbo&#34;&gt;&#xD;&#xA;  &amp;ndash; Dubbo&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---dubbo&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是一款高性能、轻量级的开源Java RPC框架&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---dubbo-工作原理&#34;&gt;&#xD;&#xA;  &amp;ndash; Dubbo 工作原理&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---dubbo-%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0. 服务容器负责启动、加载、运行服务提供者。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 服务提供者向注册中心注册自己提供的服务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 服务消费者向注册中心订阅自己消费的服务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 注册中心通知服务消费者，服务节点的变更&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4. 服务消费者基于负载均衡算法，从服务列表中选一台进行调用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5. 服务消费者/提供者，将调用信息发送到监控中心&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;https://jianda1024.github.io/img/2024Q3/img_2024-08-20_013638.png&#34; width=&#34;800&#34;/&gt;&#xD;&#xA;&lt;h2 id=&#34;---dubbo-负载均衡策略&#34;&gt;&#xD;&#xA;  &amp;ndash; Dubbo 负载均衡策略&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---dubbo-%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e7%ad%96%e7%95%a5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;策略&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;策略&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;随机策略&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;random&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;随机选择一个可用的服务节点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;轮询策略&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;roundrobin&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;按公平轮询的方式选择服务节点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;最少活跃数策略&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;leastactive&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;优先选择活跃调用数最少的服务节点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;一致性哈希策略&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;consistenthash&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;通过哈希算法将相同参数的请求发送到同一个服务节点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;---dubbospring-cloud&#34;&gt;&#xD;&#xA;  &amp;ndash; Dubbo、Spring Cloud&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---dubbospring-cloud&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Dubbo&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Spring Cloud&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;所属厂商&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;阿里系的分布式服务治理框架&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Apache 旗下的 Spring 体系下的微服务解决方案&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;通信机制&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;RPC 通信&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;基于 HTTP 的 REST 方式&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;技术维度&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;只是实现了服务治理&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;覆盖了微服务架构下的方方面面&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;---dubbozookeeper&#34;&gt;&#xD;&#xA;  &amp;ndash; Dubbo、Zookeeper&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---dubbozookeeper&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Dubbo推荐使用Zookeeper作为服务的注册中心&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zookeeper</title>
      <link>https://jianda1024.github.io/interview/09_service/zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/interview/09_service/zookeeper/</guid>
      <description>&lt;h2 id=&#34;---zookeeper&#34;&gt;&#xD;&#xA;  &amp;ndash; Zookeeper&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---zookeeper&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是一个开源的分布式的服务协调框架&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;特点&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;数据一致性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;每个server都保存了一份相同的数据副本，client无论连接到哪个server，数据都是一致的&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;请求顺序性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;来自同一个client的更新请求，其发送顺序和最后的执行顺序是一致的&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;可靠性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;当一个消息被成功更新后，不会因为网络波动或其他原因而回滚&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;原子性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;更新要不成功要不失败，没有第三个状态&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;独立性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;不同的client之间互不影响&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;实时性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;在一定时间范围内，client能读到最新数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;---zookeeper-角色&#34;&gt;&#xD;&#xA;  &amp;ndash; Zookeeper 角色&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---zookeeper-%e8%a7%92%e8%89%b2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;角色&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;角色&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Leader&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;领导者&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;为客户端提供读服务和写服务。管理集群内的所有事务的顺序，以及维护集群状态的同步&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Follower&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;跟随者&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;为客户端提供读服务，参与Leader选举过程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Observer&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;观察者&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;为客户端提供读服务，不参与Leader选举过程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2024Q3/img_2024-08-21_024737.png&#34; width=&#34;850&#34;/&gt;&#xD;&#xA;&lt;h2 id=&#34;---zookeeper-应用场景&#34;&gt;&#xD;&#xA;  &amp;ndash; Zookeeper 应用场景&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#---zookeeper-%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 数据发布与订阅&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 命名服务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 配置管理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4. 集群管理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5. 分布式通知与协调&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6. 分布式锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7. 分布式队列&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
  </channel>
</rss>
