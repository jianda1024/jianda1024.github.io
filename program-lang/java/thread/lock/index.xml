<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>锁体系 on Document</title>
    <link>https://jianda1024.github.io/program-lang/java/thread/lock/</link>
    <description>Recent content in 锁体系 on Document</description>
    <generator>Hugo</generator>
    <language>doc</language>
    <atom:link href="https://jianda1024.github.io/program-lang/java/thread/lock/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>锁</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/lock/concurrency-lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/lock/concurrency-lock/</guid>
      <description>&lt;h1 id=&#34;锁&#34;&gt;&#xD;&#xA;  锁&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%94%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;并发锁&#34;&gt;&#xD;&#xA;  并发锁&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%b6%e5%8f%91%e9%94%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锁是用来控制多个线程访问共享资源的方式&lt;/li&gt;&#xA;&lt;li&gt;一个锁能够防止多个线程同时访问共享资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;实现方案&#34;&gt;&#xD;&#xA;  实现方案&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;synchronized&#34;&gt;&#xD;&#xA;  synchronized&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#synchronized&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;div style=&#34;font-weight:400&#34;&gt;存在层次&lt;/div&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;div style=&#34;font-weight:400&#34;&gt;是一个Java关键字，基于JVM层面实现&lt;/div&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的获取&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;假设A线程持有锁，B线程等待。如果A线程阻塞，B线程会一直等待&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的释放&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;自动释放：&lt;br/&gt;当持有锁的线程执行完同步代码，释放锁；当线程执行发生异常，jvm会让线程释放锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的状态&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;无法判断&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的类型&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;可重入、不可中断、非公平&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的机制&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;悲观锁机制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;lock&#34;&gt;&#xD;&#xA;  Lock&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lock&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;div style=&#34;font-weight:400&#34;&gt;存在层次&lt;/div&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;div style=&#34;font-weight:400&#34;&gt;是一个Java接口，基于JDK层面实现&lt;/div&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的获取&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;有多种方式获取锁，线程可以不用一直等待&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的释放&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;手动释放：&lt;br/&gt;需要在finally中释放锁，不然容易造成线程死锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的状态&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;可以判断&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的类型&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;可重入、可中断、可公平/可非公平&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;锁的机制&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;乐观锁机制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;性能&#34;&gt;&#xD;&#xA;  性能&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;推荐优先使用synchronized，而不是Lock&lt;/li&gt;&#xA;&lt;li&gt;synchronized：少量同步&lt;/li&gt;&#xA;&lt;li&gt;Lock：大量同步&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;调度&#34;&gt;&#xD;&#xA;  调度&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b0%83%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;synchronized：使用Object对象本身的wait 、notify、notifyAll调度机制&lt;/li&gt;&#xA;&lt;li&gt;Lock：可以使用Condition进行线程之间的调度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;锁的类型&#34;&gt;&#xD;&#xA;  锁的类型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%94%81%e7%9a%84%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;偏向锁--轻量级锁--重量级锁&#34;&gt;&#xD;&#xA;  偏向锁 / 轻量级锁 / 重量级锁&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%81%8f%e5%90%91%e9%94%81--%e8%bd%bb%e9%87%8f%e7%ba%a7%e9%94%81--%e9%87%8d%e9%87%8f%e7%ba%a7%e9%94%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://jianda1024.github.io/docs/develop-language/java/concurrency/concurrency-theory/synchronized/#同步优化&#34; target =&#34;_blank &#34;&gt;详情&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;乐观锁--悲观锁&#34;&gt;&#xD;&#xA;  乐观锁 &amp;amp; 悲观锁&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b9%90%e8%a7%82%e9%94%81--%e6%82%b2%e8%a7%82%e9%94%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;乐观锁&lt;/p&gt;</description>
    </item>
    <item>
      <title>AQS</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/lock/aqs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/lock/aqs/</guid>
      <description>&lt;h1 id=&#34;aqs-原理&#34;&gt;&#xD;&#xA;  AQS 原理&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aqs-%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;aqs&#34;&gt;&#xD;&#xA;  AQS&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aqs&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;抽象的队列同步器，AbstarctQueuedSynchronizer，简称AQS&lt;/li&gt;&#xA;&lt;li&gt;AQS 定义了一套多线程访问共享资源的同步器基础框架，许多同步类实现都依赖于它，如ReentrantLock、Semaphore&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;clh-队列&#34;&gt;&#xD;&#xA;  CLH 队列&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#clh-%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是一个FIFO双向队列。 （FIFO：First in First out，先入先出）&#xA;&lt;img src=&#34;https://jianda1024.github.io/img/2022Q1/img_2022-03-14_104712.png&#34; width=&#34;650&#34;/&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aqs-原理-1&#34;&gt;&#xD;&#xA;  AQS 原理&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aqs-%e5%8e%9f%e7%90%86-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AQS 维护了一个共享变量 state 和一个 CLH 队列。&lt;/li&gt;&#xA;&lt;li&gt;线程通过 CAS 去改变 state 状态，成功则获取锁成功，失败则进入等待队列，等待被唤醒。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aqs-实现&#34;&gt;&#xD;&#xA;  AQS 实现&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aqs-%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AQS的设计是基于模板模式。&lt;/li&gt;&#xA;&lt;li&gt;AQS已实现了对等待队列的维护，自定义同步器只需要实现共享资源state的获取与释放方式即可。&lt;/li&gt;&#xA;&lt;li&gt;AQS 定义了两种资源共享方式：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Exclusive：独占方式，只有一个线程能执行，如ReentrantLock&lt;/li&gt;&#xA;&lt;li&gt;Share：共享方式，多个线程可以同时执行，如Semaphore、CountDownLatch&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;同步状态&#34;&gt;&#xD;&#xA;  同步状态&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%8c%e6%ad%a5%e7%8a%b6%e6%80%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;state用来表示当前的同步状态，根据当前state的值，来判断当前处于锁定状态还是其他状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 同步状态&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;state;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 获取当前同步状态&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;getState&lt;/span&gt;()&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 设置当前同步状态&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;setState&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;newState)&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 使用CAS设置当前同步状态，该方法能够保证设置同步状态时的原子性；&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 参数expect为state的预期旧值，而update是需要修改的新值，若设置成功，方法返回true，否则false&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;compareAndSetState&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;expect,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;update)&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>ReentrantLock</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/lock/ReentrantLock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/lock/ReentrantLock/</guid>
      <description>&lt;h1 id=&#34;reentrantlock&#34;&gt;&#xD;&#xA;  ReentrantLock&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reentrantlock&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>ReentrantReadWrite...</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/lock/ReentrantReadWriteLock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/lock/ReentrantReadWriteLock/</guid>
      <description>&lt;h1 id=&#34;reentrantreadwritelock&#34;&gt;&#xD;&#xA;  ReentrantReadWriteLock&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reentrantreadwritelock&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Condition</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/lock/Condition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/lock/Condition/</guid>
      <description>&lt;h1 id=&#34;condition&#34;&gt;&#xD;&#xA;  Condition&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#condition&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>LockSupport</title>
      <link>https://jianda1024.github.io/program-lang/java/thread/lock/LockSupport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jianda1024.github.io/program-lang/java/thread/lock/LockSupport/</guid>
      <description>&lt;h1 id=&#34;locksupport&#34;&gt;&#xD;&#xA;  LockSupport&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#locksupport&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;</description>
    </item>
  </channel>
</rss>
